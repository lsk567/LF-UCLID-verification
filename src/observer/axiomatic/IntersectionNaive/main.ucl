/*******************************
 * Auto-generated UCLID5 model *
 ******************************/
 
module main {
 
    type    * = common.*;
    define  * = common.*;
    const   * = common.*;
     
    // Mark the start of the trace.
    var start : timestamp_t;
    assume(start == pi1(zero()));
     
    // Declare the trace
    // The counterexample reflects a particular frame of reference.
    var trace : trace_t;
    
    // Helper macro that returns an element based on index
    define elem(i : integer) : element_t
    = get(trace, i);
     
    /************
     * Topology *
     ************/
    // Return reaction priority.
    define priority(i : id_t) : integer
    = if (i == rsu_1 || i == v1_1 || i == v2_1) then 1 else (
        if (i == rsu_2 || i == v1_2 || i == v2_2) then 2 else (
            if (i == rsu_3 || i == v1_3 || i == v2_3) then 3 else (
                999)));
     
    // Return logical delay in a connection.
    define logical_delay(i1, i2 : id_t) : interval_t
    = if (
        (i1 == v1_3 && i2 == rsu_3)
        || (i1 == v2_3 && i2 == rsu_3)
        || (i1 == v1_1 && i2 == rsu_1)
        || (i1 == v2_1 && i2 == rsu_1)
        || (i1 == rsu_2 && i2 == v1_2)
        || (i1 == rsu_2 && i2 == v2_2)
    ) then zero()
    else (
    if (
        (i1 == v1_2 && i2 == v1_3)
        || (i1 == v2_2 && i2 == v2_3)
        || (i1 == rsu_1 && i2 == rsu_2)
    ) then mstep()
    else inf()
    );

    // Timer-related constants and macros.
    const NUM_TIMERS : integer = 0;

    define timer_period(i : id_t) : interval_t
    = inf();

    define timer_offset(i : id_t) : interval_t
    = inf();

    // Return true if two events occur on the same federate.
    define _id_same_fed(e1, e2 : element_t) : boolean
    = (id(e1) == id(e2) && id(e1) != NULL && id(e2) != NULL)
        || (id(e1) == rsu_1 && id(e2) == rsu_2)
        || (id(e1) == rsu_1 && id(e2) == rsu_3)
        || (id(e1) == rsu_2 && id(e2) == rsu_3)
        || (id(e1) == v1_1 && id(e2) == v1_2)
        || (id(e1) == v1_1 && id(e2) == v1_3)
        || (id(e1) == v1_2 && id(e2) == v1_3)
        || (id(e1) == v2_1 && id(e2) == v2_2)
        || (id(e1) == v2_1 && id(e2) == v2_3)
        || (id(e1) == v2_2 && id(e2) == v2_3);

    // Return true if two events occur on different federates.
    define _id_diff_fed(e1, e2 : element_t) : boolean
    = (id(e1) == v1_3 && id(e2) == rsu_3)
        || (id(e1) == v1_1 && id(e2) == rsu_1)
        || (id(e1) == v2_3 && id(e2) == rsu_3)
        || (id(e1) == v2_1 && id(e2) == rsu_1)
        || (id(e1) == rsu_2 && id(e2) == v1_2)
        || (id(e1) == rsu_2 && id(e2) == v2_2);

    // Return true if e1 happened before e2 in the same federate,
    // by comparing the tags and the priorities of the two events.
    //
    // TODO: account for nested reactors in federates.
    define _hb_same_fed(_e1, _e2 : element_t) : boolean
    = tag_earlier(g(_e1), g(_e2)) ||
        (tag_same(g(_e1), g(_e2)) && priority(id(_e1)) < priority(id(_e2)));
    
    // Return true if e1 happened before e2 in different federates
    // and e1 has a connection to e2. This check uses the time tags
    // and the logical delay in the connection.
    //
    // FIXME: account for physical connections.
    define _hb_diff_fed(_e1, _e2 : element_t) : boolean
    = tag_earlier(tag_delay(g(_e1), logical_delay(id(_e1), id(_e2))), g(_e2))
        || tag_same(tag_delay(g(_e1), logical_delay(id(_e1), id(_e2))), g(_e2));
    
    // Check the happened-before relation between two immediate events.
    define _hb(_e1, _e2 : element_t) : boolean
    =   // If two events belong to the same federate,
        // determine hb via tags.
        // This is bi-directional.
        (_id_same_fed(_e1, _e2) && _hb_same_fed(_e1, _e2))
        // If two events belong to different federates,
        // check if a connection is present.
        // This is uni-directional.
        || (_id_diff_fed(_e1, _e2) && _hb_diff_fed(_e1, _e2));
    

    /**
     * UCLID5 Bug:
     * When g is being redefined in the existential clause,
     * the compiler returns
     *
     * ```
     * Type error line 20: Cannot apply g, which is of type integer.
     * define pi1(t : tag_t)   : timestamp_t   = t._1;         // Get timestamp from tag
     * ```
     *
     * which is very uninformative. 
     */

    // HB path with 1 ed_ge
    define hb_1(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b : integer) :: in_range(a) && in_range(b) 
        // Check if a path between e1 and e2 exists.
        && elem(a) == e1 && elem(b) == e2
        && _hb(elem(a), elem(b))
        && a < b; 
    
    // HB path with 2 ed_ges
    define hb_2(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c : integer) :: elem(a) == e1 && elem(c) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c))
        && a < b && b < c;
    
    // HB path with 3 ed_ges
    define hb_3(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d : integer) :: elem(a) == e1 && elem(d) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && a < b && b < c && c < d;
    
    // HB path with 4 ed_ges
    define hb_4(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d, e : integer) :: elem(a) == e1 && elem(e) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && _hb(elem(d), elem(e))
        && a < b && b < c && c < d && d < e;

    // HB path with 5 ed_ges
    define hb_5(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d, e, f : integer) :: elem(a) == e1 && elem(f) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && _hb(elem(d), elem(e)) && _hb(elem(e), elem(f))
        && a < b && b < c && c < d && d < e && e < f;

    // HB path with 6 ed_ges
    define hb_6(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d, e, f, _g : integer) :: elem(a) == e1 && elem(_g) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && _hb(elem(d), elem(e)) && _hb(elem(e), elem(f)) && _hb(elem(f), elem(_g))
        && a < b && b < c && c < d && d < e && e < f && f < _g;

    // HB path with 7 ed_ges
    define hb_7(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d, e, f, _g, h : integer) :: elem(a) == e1 && elem(h) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && _hb(elem(d), elem(e)) && _hb(elem(e), elem(f)) && _hb(elem(f), elem(_g))
        && _hb(elem(_g), elem(h))
        && a < b && b < c && c < d && d < e && e < f && f < _g && _g < h;

    // HB path with 8 ed_ges
    define hb_8(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d, e, f, _g, h, i : integer) :: elem(a) == e1 && elem(i) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && _hb(elem(d), elem(e)) && _hb(elem(e), elem(f)) && _hb(elem(f), elem(_g))
        && _hb(elem(_g), elem(h)) && _hb(elem(h), elem(i))
        && a < b && b < c && c < d && d < e && e < f && f < _g && _g < h && h < i;

    // HB path with 9 ed_ges
    define hb_9(e1, e2 : element_t) : boolean
    // Link e1, e2 to the start and end of a path.
    = exists (a, b, c, d, e, f, _g, h, i, j : integer) :: elem(a) == e1 && elem(j) == e2 
        // Check if a path between e1 and e2 exists.
        && _hb(elem(a), elem(b)) && _hb(elem(b), elem(c)) && _hb(elem(c), elem(d))
        && _hb(elem(d), elem(e)) && _hb(elem(e), elem(f)) && _hb(elem(f), elem(_g))
        && _hb(elem(_g), elem(h)) && _hb(elem(h), elem(i)) && _hb(elem(i), elem(j))
        && a < b && b < c && c < d && d < e && e < f && f < _g && _g < h && h < i && i < j;

    // Transitive "happened-before" definition
    define hb(e1, e2 : element_t) : boolean
    = hb_1(e1, e2) || hb_2(e1, e2) || hb_3(e1, e2)
        || hb_4(e1, e2) || hb_5(e1, e2) || hb_6(e1, e2)
        || hb_7(e1, e2) || hb_8(e1, e2) || hb_9(e1, e2);

    /***************************
     * Topological Abstraction *
     ***************************/

    define is_multiple_of(a, b : integer) : boolean
    = exists (c : integer) :: b * c == a;
    
    define is_closest_starting_point(t : tag_t, period : integer, offset : integer) : boolean
    = (exists (c : integer) :: (period * c) + offset == pi1(t)
        // Tick at the next valid instant.
        && (period * (c - 1) + offset) < start)     
        // Timer always has mstep of 0.
        && pi2(t) == 0;                           
    
    // first & last in trace
    define first(e : element_t) : boolean
    = !(exists (i : integer) :: in_range(i) && id(elem(i)) == id(e) && tag_earlier(g(elem(i)), g(e))); 
    
    define last(e : element_t) : boolean
    = !(exists (i : integer) :: in_range(i) && id(elem(i)) == id(e) && tag_later(g(elem(i)), g(e))); 
    
    define is_triggered_by_startup(_id : id_t) : boolean
    = // If startup is within frame, put the events in the trace.
    ((start == 0) ==> (exists (i : integer) :: in_range(i)
        && id(elem(i)) == _id && tag_same(g(elem(i)), startup())))
    // Can only appear once.
    && !(exists (j : integer) :: in_range(j) && id(elem(j)) == _id
        && !tag_same(g(elem(j)), startup()));
    
    // Can directly use index as HB since this only applies to events
    // on the same federate.
    define _is_latest_invocation_in_same_fed_wrt_(a, b : integer) : boolean
    = !(exists (c : integer) :: in_range(c) 
        && id(elem(c)) == id(elem(a)) && a < c && c < b);
    
    define is_triggered_by_timer(_id : id_t) : boolean
    =   // 1. If the initial event is within frame, show it.
        (exists (i : integer) :: in_range(i)
        && id(elem(i)) == _id
        && is_closest_starting_point(g(elem(i)), pi1(timer_period(_id)),
            pi1(timer_offset(_id))))
        // 2. The SPACING between two consecutive timers is the period.
        && (forall (i, j : integer) :: (in_range(i) && in_range(j) && i < j
            && id(elem(i)) == _id && id(elem(j)) == _id
            // ...and there does not exist a 3rd invocation in between
            && !(exists (k : integer) :: id(elem(k)) == _id && i < k && k < j))
                ==> g(elem(j)) == tag_schedule(g(elem(i)), timer_period(_id)))
        // 3. There does not exist other events in the same federate that 
        // differ by the last timer invocation by g(last_timer) + period.
        // In other words, this axiom ensures a timer fires when it needs to.
        //
        // a := index of the offending event that occupy the spot of a timer tick.
        // b := index of non-timer event on the same federate
        // both in_range's are needed due to !(exists), which turns into a forall.
        && !(exists (b, a : integer) :: in_range(a) && in_range(b)
            && id(elem(b)) != _id
            && _id_same_fed(elem(b), {_id, zero()})
            && id(elem(a)) == _id
            && (_is_latest_invocation_in_same_fed_wrt_(a, b)
                && tag_later(g(elem(b)), tag_schedule(g(elem(a)), timer_period(_id))) ));

    // Triggered by physical action means there is no constraint.
    define is_triggered_by_physical_action(_id : id_t) : boolean
    = true;
    
    // This includes the possibility that upstream does NOT output.
    define is_triggered_by(downstream, upstream : id_t, delay : interval_t) : boolean
    = (forall (i : integer) :: in_range(i) ==>
        id(elem(i)) == downstream ==> (exists (j : integer) :: in_range(j)
            && id(elem(j)) == upstream 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay))
    );
    
    // A reaction is triggered by 2 inputs.
    define is_triggered_by_2(down, up1, up2 : id_t, delay, delay2 : interval_t) : boolean
    = (forall (i : integer) :: in_range(i) ==>
        id(elem(i)) == down ==> (
            (exists (j : integer) :: in_range(j)
            && id(elem(j)) == up1 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay))
            || (exists (j : integer) :: in_range(j)
            && id(elem(j)) == up2 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay2))
    ));

    // One of the two reactions must output.
    define is_definitely_triggered_by_2(down, up1, up2 : id_t, delay, delay2 : interval_t) : boolean
    = (forall (i : integer) :: in_range(i) ==>
        id(elem(i)) == down ==> (
            (exists (j : integer) :: in_range(j)
            && id(elem(j)) == up1 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay))
            || (exists (j : integer) :: in_range(j)
            && id(elem(j)) == up2 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay2))
    )) &&
    (forall (j : integer) :: in_range(j) ==>
        (
            (id(elem(j)) == up1 ==> (exists (i : integer) :: in_range(i)
                && id(elem(i)) == down
                && g(elem(i)) == tag_schedule(g(elem(j)), delay)))
            &&
            (id(elem(j)) == up2 ==> (exists (i : integer) :: in_range(i)
                && id(elem(i)) == down
                && g(elem(i)) == tag_schedule(g(elem(j)), delay2)))
        )
    );

    // This macro ensures that the upstream MUST output.
    define is_definitely_triggered_by(downstream, upstream : id_t,
        delay : interval_t) : boolean
    = (forall (i : integer) :: in_range(i) ==>
        id(elem(i)) == downstream ==> (exists (j : integer) :: in_range(j)
            && id(elem(j)) == upstream 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay))
    ) && 
    (forall (j : integer) :: in_range(j) ==>
        id(elem(j)) == upstream ==> (exists (i : integer) :: in_range(i)
            && id(elem(i)) == downstream 
            && g(elem(i)) == tag_schedule(g(elem(j)), delay))
    );
    
    define is_in_trace(_id : id_t) : boolean
    = (exists (i : integer) :: in_range(i) && id(elem(i)) == _id);

    /*********************
     * Reactor Semantics *
     *********************/

    // [Important] The trace should respect the HB relation.
    // In this case, there is no constraint on i, j when hb
    // fails to establish on both direction (def. of concurrent).
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j))
        ==> (_hb(elem(i), elem(j)) ==> i < j));
    
    // All microsteps are positive
    axiom(forall (i : integer) :: in_range(i)
        ==> pi2(g(elem(i))) >= 0);
    
    // The same event can only trigger once in a logical instant
    axiom(forall (i, j : integer) :: (in_range(i) && in_range(j))
        ==> ((id(elem(i)) == id(elem(j)) && i != j)
            ==> !tag_same(g(elem(i)), g(elem(j)))));
    
    // NULL events should appear in the suffix
    axiom(forall (j : integer) :: in_range(j) ==> (
        (id(elem(j)) != NULL) ==> (forall (i : integer) :: in_range(i) ==> 
        ((i < j) ==> id(elem(i)) != NULL)
    )));
    
    // All tags should be positive
    axiom(forall (i : integer) :: in_range(i) ==> (
        pi1(g(elem(i))) >= 0
    ));
    
    // Begin the frame at the start time specified.
    axiom(forall (i : integer) :: tag_same(g(elem(i)), {start, 0})
        || tag_later(g(elem(i)), {start, 0}));
     
    /*******************************
     * Application-specific axioms *
     *******************************/
    axiom(is_triggered_by_physical_action(v1_1));
    axiom(is_definitely_triggered_by(v1_2, rsu_2, logical_delay(rsu_2, v1_2)));
    axiom(is_definitely_triggered_by(v1_3, v1_2, logical_delay(v1_2, v1_3)));
    axiom(is_triggered_by_physical_action(v2_1));
    axiom(is_definitely_triggered_by(v2_2, rsu_2, logical_delay(rsu_2, v2_2)));
    axiom(is_definitely_triggered_by(v2_3, v2_2, logical_delay(v2_2, v2_3)));
    axiom(is_definitely_triggered_by_2(rsu_1, v1_1, v2_1, logical_delay(v1_1, rsu_1), logical_delay(v2_1, rsu_1)));
    axiom(is_definitely_triggered_by(rsu_2, rsu_1, logical_delay(rsu_1, rsu_2)));
    axiom(is_definitely_triggered_by_2(rsu_3, v1_3, v2_3, logical_delay(v1_3, rsu_3), logical_delay(v2_3, rsu_3)));
    
    /*********
     * Debug *
     *********/
    /* Debug macro */
    define exists_in_trace(e : id_t) : boolean
    = exists (i : integer) :: in_range(i) && id(elem(i)) == e;
    define at_least_two_in_trace(e : id_t) : boolean
    = exists (i, j : integer) :: in_range(i) && in_range(j)
        && id(elem(i)) == e 
        && id(elem(j)) == e
        && i != j;
    define at_most_one_in_trace(e : id_t) : boolean
    = !at_least_two_in_trace(e);

    /* Debug cases */
    // axiom(exists_in_trace(rsu_2));
    // property test : false;

    /**************
     * Properties *
     **************/
    /*****************************************
     * Property: If a arrives before b, then
     * a should receive the grant before b.
     *
     * LTL: ((G(!b.arrive)) W (a.arrive))
     * ==> ((G(!b.grant)) W (a.grant))
     *
     * Breaking it down:
     * LTL: (G(!b.arrive)) W (a.arrive)
     * p1: !b.arrive
     * p2: a.arrive
     * p3: G(p1)
     * p4: G(p3)
     * p5: p3 U p2
     * p6: p3 W p2 <==> G(p3) \/ (p3 U p2) 
     *             <==> p4 \/ p5
     *
     * LTL: (G(!b.grant)) W (a.grant)
     * p7: !b.arrive
     * p8: a.arrive
     * p9: G(p7)
     * p10: G(p9)
     * p11: p9 U p8
     * p12: p9 W p8 <==> G(p9) \/ (p9 U p8) 
     *              <==> p10 \/ p11
     *
     * p13: p6 ==> p12
     ****************************************/
    /*
    define p1(e : element_t) : boolean
    = !(id(e) == v2_1);
    define p2(e : element_t) : boolean
    = id(e) == v1_1;
    define p3(modality_idx : integer) : boolean
    = forall (k : integer) :: (in_range(k) && k >= modality_idx) ==> p1(elem(k));
    define p4(modality_idx : integer) : boolean
    = forall (k : integer) :: (in_range(k) && k >= modality_idx) ==> p3(k);
    define p5(modality_idx : integer) : boolean
    = exists (i : integer) :: in_range(i) && p2(elem(i))
        && (forall (j : integer) :: (modality_idx <= j && j < i)
            ==> p3(j));
    define p6(modality_idx : integer) : boolean
    = p4(modality_idx) || p5(modality_idx);

    define p7(e : element_t) : boolean
    = !(id(e) == v2_2);
    define p8(e : element_t) : boolean
    = id(e) == v1_2;
    define p9(modality_idx : integer) : boolean
    = forall (k : integer) :: (in_range(k) && k >= modality_idx) ==> p7(elem(k));
    define p10(modality_idx : integer) : boolean
    = forall (k : integer) :: (in_range(k) && k >= modality_idx) ==> p9(k);
    define p11(modality_idx : integer) : boolean
    = exists (i : integer) :: in_range(i) && p8(elem(i))
        && (forall (j : integer) :: (modality_idx <= j && j < i)
            ==> p9(j));
    define p12(modality_idx : integer) : boolean
    = p10(modality_idx) || p11(modality_idx);

    define p13(modality_idx : integer) : boolean
    = p6(modality_idx) ==> p12(modality_idx);
    
    define p14(modality_idx : integer) : boolean
    = p5(modality_idx) ==> p11(modality_idx);

    axiom(at_most_one_in_trace(v1_1));
    axiom(at_most_one_in_trace(v2_1));
    // axiom(at_least_two_in_trace(v2_1));
    property fairness : p14(0);
    // axiom(exists_in_trace(v2_1));
    // property test : false;
    */

    /****************************************
     * (a.arrive) /\ X(F(b.arrives))        *
     *  ==> F((a.grant) /\ X(F(b.grant)))   *
     *
     * (_tuple_0 v1_1 (_tuple_1 11 10011))  *
     * (_tuple_0 v2_1 (_tuple_1 11 10011))  *
     * (_tuple_0 rsu_1 (_tuple_1 11 10012)) *
     * (_tuple_0 rsu_2 (_tuple_1 11 10013)) *
     * (_tuple_0 v2_2 (_tuple_1 11 10014))  *
     * (_tuple_0 v2_3 (_tuple_1 11 10015))  *
     * (_tuple_0 v1_2 (_tuple_1 11 10014))  *
     * (_tuple_0 v1_3 (_tuple_1 11 10015))  *
     * (_tuple_0 rsu_3 (_tuple_1 11 10016)) *
     * (_tuple_0 NULL (_tuple_1 11 10009))  *
     ****************************************/
    // Check if the current event is a.arrive.
    define phi1(modality : integer) : boolean
    = id(elem(modality)) == v1_1; // a.arrive

    // Check if the current event is b.arrive.
    define phi2(modality : integer) : boolean
    = id(elem(modality)) == v2_1; // b.arrive
    
    // phi3 := F(phi2)
    define phi3(modality : integer) : boolean
    = exists (i : integer) :: in_range(i) && i >= modality
        && phi2(i);

    // phi4 := X(phi3)
    define phi4(modality : integer) : boolean
    = phi3(modality+1);

    // phi5 := phi1 /\ phi4
    define phi5(modality : integer) : boolean
    = phi1(modality) && phi4(modality);

    // Check if the current event is a.grant.
    define phi6(modality : integer) : boolean
    = id(elem(modality)) == v1_2; // a.grant

    // Check if the current event is b.grant.
    define phi7(modality : integer) : boolean
    = id(elem(modality)) == v2_2; // b.grant
    
    // phi8 := F(phi7)
    define phi8(modality : integer) : boolean
    = exists (i : integer) :: in_range(i) && i >= modality
        && phi7(i);

    // phi9 := X(phi8)
    define phi9(modality : integer) : boolean
    = phi8(modality+1);

    // phi10 := phi6 /\ phi9
    define phi10(modality : integer) : boolean
    = phi6(modality) && phi9(modality);

    // phi11 := F(phi10)
    define phi11(modality : integer) : boolean
    = exists (i : integer) :: in_range(i) && i >= modality
        && phi10(i);

    // phi12 := phi5 ==> phi11
    define phi12(modality : integer) : boolean
    = phi5(modality) ==> phi11(modality);
    
    /*
    axiom(phi12(0));
    axiom(exists_in_trace(v1_1));
    axiom(exists_in_trace(v1_2));
    property test : false;
    */
    property fairness : phi12(0);

     
    //////////////////////////////////////////////////
     
    control {
        v = unroll(0);
        check;
        print_results;
        v.print_cex;
    }
}
