target UCLID;

reactor Controller {
    output lock:int;
    output move:int;
    physical action external:int;
    reaction(startup) -> external {=
        // ... Set up sensing
        
        // This line of code simulates a button press
        // external->value is assumed to be 1
        // schedule(external, 0)
        outQ = pushQ(outQ, {t+0, Controller, Controller, Controller_external, 1, true});
    =}
    reaction(external) -> lock, move {=
        outQ = pushQ(outQ, {t+0, Controller, Door, Door_lock, 1, true});   // SET(lock, 0)
        outQ = pushQ(outQ, {t+0, Controller, Train, Train_move, 1, true}); // SET(move, 0)
    =}
}

reactor Train {
    input move:int;
    state moving:int;
    reaction(move) {=
        // ... Actuate to move or stop
        moving = move._5;
    =}
}

reactor Door {
    input lock:int;
    state locked:int;
    reaction(lock) {=
        // ... Actuate to lock or unlock door
        locked = lock._5;
    =}
}

main reactor System {
    controller = new Controller();
    door = new Door();
    train = new Train();
    
    controller.lock -> door.lock;
    controller.move -> train.move;
    
    preamble {=
        property[LTL] unlocked_while_moving : !F(door.locked == 0 && train.moving == 1);
    =}
}
