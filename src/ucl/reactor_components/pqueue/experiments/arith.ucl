/**
 * Modules shared by all LF formulation.
 */

// Declare common types in the system
module common {
    type tag_t = record { 
            logical : boolean,
            timestamp : integer,
            step : integer
        };
    type event_t = record { 
            tag : tag_t,
            value : integer, // ideally anytype, int for now.
            orig : integer,
            dest : integer
        };
}

module coordinator {
    /** 
     * An array for "in transit" events,
     * each time a transition happens,
     * dequeue / dispatch events with the same 
     * logical time to corresponding reactors.
     * Then corresponding reactions will trigger.
     */
}

module delay {
    /**
     * Treats delay as a module with a
     * single job to increment logical time.
     */
}

/*
module X {
    type * = common.*;

    input dbl : event_t;
    input incr : event_t;
    var s : integer;

    init {
        s = 1;
    }

    procedure reaction_dbl (_s : integer) (dbl : event_t)
        modifies s;
        ensures (s == _s * 2); // post-condition
    {
        s = _s * 2;
    }

    procedure reaction_incr (incr : event_t)
        modifies s;
    {
        s = s + incr;
    }

    next {
    
    }
}
*/

/*
module Relay {
    type * = common.*;

    input r : event_t;
    output out : event_t;

    procedure reaction_r (r : event_t)
    {
        out = r;
    }

    init {

    }

    next {

    }
}
*/

module Y {
    type * = common.*;

    output dbl : event_t;
    output incr : event_t;

    init {
        dbl = 1;
        incr = 1;
    }
}

module main {
    // Current logical time
    var current_logical_time : integer;

    // ... instances ...

    // TODO: define connections
}
