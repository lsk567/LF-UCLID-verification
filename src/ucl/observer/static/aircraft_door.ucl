module app {

    type rxn_id_t = enum { A1, B1, C1 };
    type reactor_id_t = enum { A, B, C };

    // Reaction precedence relation
    define rxn_precede(r1, r2 : rxn_id_t) : boolean
    = (r1 == A1 && r2 == B1)
        || (r1 == B1 && r2 == C1)
        || (r1 == A1 && r2 == C1);

    // Reaction precedence relation
    define rxn_has_edge(r1, r2 : rxn_id_t) : boolean
    = (r1 == A1 && r2 == B1)
        || (r1 == B1 && r2 == C1);

    // Reachability relation derived from topology graph
    define rxn_reach(r1, r2 : rxn_id_t) : boolean
    = (r1 == A1 && r2 == B1)
        || (r1 == B1 && r2 == C1)
        || (r1 == A1 && r2 == C1);

    // Logical delays
    const A_out_B_in_DELAY : interval_t = 0;
    const B_out_C_in_DELAY : interval_t = 0;
}

module common {

    type * = app.*;
    define * = app.*;
    const * = app.*;

    /**
     * Time tag-related types and macros
     */
    type timestamp_t = integer;
    type interval_t  = integer;
    type microstep_t = integer;

    type tag_t = {
        timestamp_t,
        microstep_t
    };

    // Projection macros
    define pi1(t : tag_t) : timestamp_t = t._1;
    define pi2(t : tag_t) : interval_t = t._2;

    // Tag comparison
    define tag_later(t1 : tag_t, t2 : tag_t) : boolean
        = if (t1._1 > t2._1 || (t1._1 == t2._1 && t1._2 > t2._2)) then true else false;

    define tag_earlier(t1 : tag_t, t2 : tag_t) : boolean
        = if (t1._1 < 0) then false else (if (t2._1 < 0) then true else (if (t1._1 < t2._1 || (t1._1 == t2._1 && t1._2 < t2._2)) then true else false));

    define tag_same(t1 : tag_t, t2 : tag_t) : boolean
        = if (t1 == t2) then true else false;

    // Tag algebra
    define tag_schedule(t : tag_t, i : interval_t) : tag_t
        = if (i < 0) then t else (if (i == 0) then { pi1(t), pi2(t) + 1 } else { pi1(t) + i, 0 });

    define tag_delay(t : tag_t, i : interval_t) : tag_t
        = { pi1(t) + i, pi2(t) };

    // Only consider timestamp for now.
    define tag_diff(t1, t2: tag_t) : interval_t
        = pi1(t1) - pi1(t2);

    /**
     * Reaction graph + Topology graph
     * FIXME: perhaps there are more efficient encodings.
     */
    type _rxn_id_t = rxn_id_t;

    // Precedence in reaction graph
    define _rxn_precede(r1, r2 : _rxn_id_t) : boolean
    = rxn_precede(r1, r2);

    // Topology graph
    // FIXME: strict superset of precedence graph
    //          returns minimum delay
    define _rxn_has_edge(r1, r2 : _rxn_id_t) : boolean
    = rxn_has_edge(r1, r2);

    // Reachability derived from the topology graph
    define _rxn_reach(r1, r2 : _rxn_id_t) : boolean
    = rxn_reach(r1, r2);

    /**
     * Reaction invocation
     */
    type invocation_t = { _rxn_id_t, tag_t };

    // Projection macros
    define N(i : invocation_t) : _rxn_id_t = i._1;
    define g(i : invocation_t) : tag_t = i._2;

    /**
     * Message type
     */
    // msg_t should have a trigger and an arrival tag, which turns out to be
    // the same as invocation_t. In this model, the source reactor generates
    // an invocation, which the sink reactor can directly map on its timeline.
    type msg_t = invocation_t;

    /**
     * Trace
     */
    type step_t = integer;

    /**
     * Invoke before & temporal operators
     */
    // Defining "invoke before"
    // Relies on assumption #2.
    define invoke_before(_i : interval_t, i1, i2 : invocation_t) : boolean
    = (_i == 0 
            ==> (tag_same(g(i1), g(i2))) 
                && _rxn_precede(N(i1), N(i2)))
        && (_i > 0 
            ==> (tag_diff(g(i1), g(i2)) == _i 
                && _rxn_reach(N(i1), N(i2))));
}

module main {
    
    type * = common.*;
    define * = common.*;

    var trace_A : [step_t]invocation_t;
    var trace_B : [step_t]invocation_t;
    var trace_C : [step_t]invocation_t;

    init {
        // Initialize the traces
        trace_A[0] = { A1, {1,0} };
        trace_A[1] = { A1, {3,0} };
        trace_A[2] = { A1, {5,0} };

        trace_B[0] = { B1, {1,0} };
        trace_B[1] = { B1, {3,0} };
        trace_B[2] = { B1, {5,0} };

        trace_C[0] = { C1, {1,0} };
        trace_C[1] = { C1, {3,0} };
        trace_C[2] = { C1, {5,0} };
    }

    property prop : forall (i, j : step_t) ::
        (i >= 0 && i <= 2 && j >= 0 && j <= 2)
            ==> (invoke_before(0, trace_A[i], trace_C[j]))
                ==> !(exists (k : step_t) ::
                    invoke_before(0, trace_A[i], trace_B[k])
                    && invoke_before(0, trace_B[k], trace_C[j]));

    control {
        v = unroll(0);
        check;
        print_results;
        v.print_cex();
    }
}
