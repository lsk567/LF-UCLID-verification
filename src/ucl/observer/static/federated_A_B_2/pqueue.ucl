module EventQ
{
    type * = common.*;
    define * = common.*;

    type index_t = integer;
    type count_t = integer;
    type data_t = msg_t;
    type queue_t = {
                    data_t,
                    data_t,
                    data_t,
                    data_t,
                    data_t
                   };

    define get(q : queue_t, i : integer) : data_t
    = if (i == 1) then q._1 else
        (if (i == 2) then q._2 else
            (if (i == 3) then q._3 else
                (if (i == 4) then q._4 else
                    if (i == 5) then q._5 else
                        NULL_EVENT)));

    define set(q : queue_t, i : integer, v : data_t) : queue_t
    = if (i == 1) then {v, q._2, q._3, q._4, q._5} else
        (if (i == 2) then {q._1, v, q._3, q._4, q._5} else
            (if (i == 3) then {q._1, q._2, v, q._4, q._5} else
                (if (i == 4) then {q._1, q._2, q._3, v, q._5} else (
                    if (i == 5) then {q._1, q._2, q._3, q._4, v} else
                        q))));

    define inQ(q : queue_t, v : data_t) : boolean
    = (exists (i : index_t) ::
        (i >= 1 && i <= SIZE) && get(q, i) == v);

    define isNULL(d : data_t) : integer
    = if (d == NULL_EVENT) then 1 else 0;

    define countQ(q : queue_t) : integer
    = SIZE - (isNULL(q._1) + isNULL(q._2) + isNULL(q._3) + 
                isNULL(q._4) + isNULL(q._5));

    const SIZE : integer = 5;
    
    var NULL_EVENT : data_t;

    input _in : data_t;
    output out : data_t; // Output from popQ()

    var contents : queue_t;
    var count : integer;
    var __idx__ : integer;
    var __done__ : boolean;
    var __min__ : data_t; 


    procedure pushQ(_contents : queue_t, _data : data_t)
        returns (
            contentsP : queue_t,
            countP : integer
        )
        modifies __idx__, __done__;
        // requires (op == POP);
    {
        __idx__ = 1;
        __done__ = false;
        
        for (i : integer) in range(1, SIZE) {
            if (get(_contents, i) == NULL_EVENT &&
                !__done__ &&
                _data != NULL_EVENT)
            {
                contentsP = set(_contents, i, _data);
                countP = count + 1;
                __done__ = true;
            }
        }

        if (!__done__) {
            contentsP = _contents;
            countP = count;
        }
    }

    procedure popQ(_contents : queue_t)
        returns (
            contentsP : queue_t,
            countP : integer,
            outP : data_t
        )
        modifies __min__, __idx__;
        // requires ( op == PUSH ); // Useful for printing execution traces
    {
        // Be careful not to block all paths,
        // leading to meaningless passes.
        havoc __idx__;
        assume(forall (i : integer) ::
            get(_contents, i) != NULL_EVENT ==>
            (tag_earlier(g(get(_contents, __idx__)), g(get(_contents, i)))
            || tag_same(g(get(_contents, __idx__)), g(get(_contents, i)))));
        assume(countQ(_contents) > 0 ==> get(_contents, __idx__) != NULL_EVENT);

        outP = get(_contents, __idx__);
        contentsP = set(_contents, __idx__, NULL_EVENT);
        if (outP == NULL_EVENT) {
            countP = count;
        }
        else {
            countP = count - 1;
        }
    }

    procedure run()
        returns (
            contentsP : queue_t,
            countP : integer,
            outP : data_t
        )
        modifies __min__, __idx__, __done__;
    {
        var _contents : queue_t;
        var _count : count_t;
        call (_contents, _count) = pushQ(contents, _in);
        call (contentsP, countP, outP) = popQ(_contents);
    }

    init {
        NULL_EVENT = { NULL, {0,0} };
        __idx__ = 0;
        __done__ = false;

        count = 0;
        contents = {
                    NULL_EVENT,
                    NULL_EVENT,
                    NULL_EVENT,
                    NULL_EVENT,
                    NULL_EVENT
                   };
    }

    next {
        call (contents', count', out') = run();
    }

    control {
        // v = verify(pushQ);
        v = verify(popQ);
        check;
        print_results;
        v.print_cex();
    }
}
