target C {
    threads: 1,
    keepalive: true
};

reactor Controller {
    
    preamble {=
        // Read input characters until an EOF is received.
        // Each time a newline is received, schedule a response
        // action.
        
        struct arg_struct {
            void* _response;
            void* _toggleVision;
        };
        
        void print_msg() {
        	printf("Press \"d\" to open/close the door.\nPress \"v\" to turn on/off the Vision System.\n");
        }
        
        void* read_input(void* args) {
            char c;
            while(1) {
                c = getchar();
                if (c != '\n') {
                    if (c == 'd') {
                        schedule(((struct arg_struct*) args)->_response, 0);
                    } 
                    else if (c == 'v') {
                        schedule(((struct arg_struct*) args)->_toggleVision, 0);
                    }
                    else {
                        printf("Unknown key: %c\n", c);
                        print_msg();
                    }
	                if (c == EOF) {
	                    request_stop();
	                    break;
	                }
                }
            }
            return NULL;
        }
    =}
    
    output out:bool;
    output enableVision:bool;
    state request_time:time(0);
    state door:bool(true);
    state useVision:bool(true);
    physical action response;
    physical action toggleVision;
    
    reaction(startup) -> response, toggleVision {=        
        pthread_t thread_id;
        
        struct arg_struct *args = malloc(sizeof *args);
        args->_response = response;
        args->_toggleVision = toggleVision;
        
        pthread_create(&thread_id, NULL, &read_input, (void*)args);
        print_msg();
    =}
    
    reaction(response) -> out {=
    	self->door = !self->door;
        SET(out, self->door);
    =}
    
    reaction(toggleVision) -> enableVision {=
        self->useVision = !self->useVision;
        SET(enableVision, self->useVision);
    =}
}

reactor Vision {
    
    input _in:bool;
    output out:bool;
    
    reaction(_in) -> out {=
        SET(out, _in->value);
    =}
}

reactor Door {
    
    input inVision:bool;
    input inController:bool;
    input enableVision:bool;
    state useVision:bool(true);
    
    reaction(enableVision) {=
        self->useVision = enableVision->value;
        printf("Vision System status: %s\n", self->useVision ? "true" : "false");
    =}
    
    reaction(inVision, inController) {=        
        bool cmd;
        if (self->useVision) {
            printf("Vision System in use.\n");
            if (!inVision->is_present)
            	return;
            cmd = inVision->value;
        }
        else {
            printf("Bypassing Vision System.\n");
            if (!inController->is_present)
            	return;
            cmd = inController->value;
        }
        
        if (cmd) {
            printf("Door is set to open at %lld nsec.\n", get_logical_time());
        } else {
            printf("Door is set to close at %lld nsec.\n", get_logical_time());
        }
    =}
}

main reactor {
    
    controller	= new Controller();
    vision		= new Vision();
    door		= new Door();
    
    controller.out			-> vision._in;
    vision.out				-> door.inVision;
    controller.out			-> door.inController;
    controller.enableVision -> door.enableVision;
}